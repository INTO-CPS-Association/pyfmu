"""This file contains functional tests of FMUs generated by PyFMU

To test for compatability the following tools are applied:
1. fmpy: executes a simulation of the FMU
2. vdmcheck: through static validation of modelDescription.xml file
3. fmucheck: executes a simulation of the FMU and various static checks
4. maestroV1: loads the fmu into maestroV1, NOTE: that it does NOT perform a simulation
"""

from pyfmu.builder import validate_fmu
from .utils import ExampleArchive


def log_callback(e, i, s, c, m):
    print(f"{i}{s}{c}{m}")


def fmi_logger(m):
    print(f"{m}")


# validate every example with
_validate_with = [
    "fmpy",
    "vdmcheck",
    "fmucheck",
    "maestro_v1",
]


def test_Adder():
    with ExampleArchive("Adder") as a:
        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_BicycleKinematic():
    with ExampleArchive("BicycleKinematic") as a:

        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_ConstantSignalGenerator():
    with ExampleArchive("ConstantSignalGenerator") as a:
        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_FmiTypes():
    with ExampleArchive("FmiTypes") as a:

        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_LivePlotting():
    with ExampleArchive("LivePlotting") as a:
        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_SineGenerator():
    with ExampleArchive("SineGenerator") as a:
        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_BicycleDynamic():
    with ExampleArchive("BicycleDynamic") as a:
        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_BicycleDriver():
    with ExampleArchive("BicycleDriver") as a:
        res = validate_fmu(a.root, _validate_with)
        print(res.get_report())
        assert res.valid


def test_default_example(tmpdir):

    from pyfmu.builder import generate_project, export_project
    from pathlib import Path

    project_path = Path(tmpdir) / "MyFMU"
    export_path = Path(tmpdir) / "MyFMU_Exported"

    generate_project(output_path=project_path, slave_class="MyFMU")
    export_project(
        project_or_path=project_path, output_path=export_path, compress=False
    )

    res = validate_fmu(export_path, _validate_with)
    print(res.get_report())
    assert res.valid

