from pyfmu.fmi2 import Fmi2Slave, Fmi2Causality, Fmi2Status, Fmi2Variability, Fmi2DataTypes, Fmi2Initial

class {{class_name}}(Fmi2Slave):

    def __init__(self, *args, **kwargs):
        
        author = "{{author}}"
        modelName = "{{model_name}}"
        description = "{{description}}"    
        
        super().__init__(
            modelName=modelName,
            author=author,
            description=description,
            *args,
            **kwargs
            )

        # Inputs, outputs and parameters may be defined using the 'register_variable' function
        self.register_variable('a','real','input',start=0.0, description='first addend')
        self.register_variable('b','real','input',start=0.0, description='second addend')
        self.register_variable('s','real','output',description='sum of the two numbers')


    def do_step(self, current_time: float, step_size: float, no_prior_step : bool):
        self.s = self.a + self.b
        return Fmi2Status.ok

    def exit_initialization_mode(self):
        self.s = self.a + self.b 
        # No explicit return implies OK

# Writing a small test program to test slave saves a lot of time.
# Proper unit testing frameworks may be used as well.
if __name__ == "__main__":
    fmu = {{class_name}}()
    fmu.enter_initialization()
    fmu.exit_initialization()
    fmu.do_step(0,1,False)


